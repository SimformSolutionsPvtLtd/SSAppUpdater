#!/bin/bash

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
PARENTDIR="$(dirname "$SCRIPTPATH")"

function createversionXML() {
    echo "SCRIPTPATH: $SCRIPTPATH"
    INPUT_FILE="${SCRIPTPATH}/version_info.txt"
    # Desired output location
    OUTPUT_FILE="${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/Version.xml"

    # Initialize variables
    release_date=""
    build_url=""
    release_notes=""

    # Ensure the input file exists
    if [[ ! -f "$INPUT_FILE" ]]; then
      echo "Error: $INPUT_FILE not found!"
      exit 1
    fi

    # Read the input file line by line
    while IFS= read -r line; do
      # Trim leading/trailing whitespace
      line=$(echo "$line" | xargs)


      # Check for the release date
      if [[ $line == Release\ Date:* ]]; then
        release_date=$(echo ${line#Release Date:} | xargs)
      fi

      # Check for the build URL
      if [[ $line == Server\ URL:* ]]; then
        build_url=$(echo ${line#Server URL:} | xargs)
      fi

      # Collect release notes (lines starting with '-')
      if [[ $line == -* ]]; then
        release_notes+="    <note>${line#- }</note>"$'\n'
      fi

    done < "$INPUT_FILE"

    # Generate version.xml
    cat <<EOF > "$OUTPUT_FILE"
<update>
  <version>$version</version>
  <latestBuildURL>$build_url$APP_NAME.zip</latestBuildURL>
  <release_notes>
$release_notes  </release_notes>
</update>
EOF

    echo "version.xml has been generated successfully at $OUTPUT_FILE."

}

function createArchive() {
    echo -e "\033[1m** EXPORT ARCHIVE STARTED **\033[0m"
    echo "......................................................................................."

    # Find the latest archive
    LATEST_ARCHIVE=$(find ~/Library/Developer/Xcode/Archives/ -type d -name "*.xcarchive" -print0 | xargs -0 ls -1td | head -n 1)
    echo "LATEST_ARCHIVE: ${LATEST_ARCHIVE}"

    TEMP_PLIST="${SCRIPTPATH}/ExportOptions.plist"

    # Create temporary ExportOptions.plist
    cat <<EOF > "${TEMP_PLIST}"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>developer-id</string>
</dict>
</plist>
EOF

    # Ensure the export path directory exists and has correct permissions
    mkdir -p "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent"
    chmod +w "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent"

    # Export the archive
    xcodebuild -exportArchive \
        -archivePath "${LATEST_ARCHIVE}" \
        -exportPath "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent" \
        -exportOptionsPlist "${TEMP_PLIST}"

    handleErrorIfAnyAndExit $? "The export of the archive failed."

    echo "......................................................................................."
    echo -e "\n\n"

    # Clean up files that are not .app
    ls -1 "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent" | grep -v "\.app$" | xargs -I {} rm "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/{}"
}

function compressApp() {
    APP_FILE=$(ls -1 ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent | grep "\.app$")
    APP_NAME=$(basename "${APP_FILE}" .app)
    # Move to target directory to compress app
    echo -e "\033[1m** CREATE ZIP OF .app FILE **\033[0m"
    echo "......................................................................................."
    cd ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent
    zip -9 -y -q -r ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/"${APP_NAME}".zip "${APP_NAME}".app

    codesign --sign "Developer ID Application: SIMFORM LLC (K7XJG666ZW)" --options runtime --deep --force ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/"${APP_NAME}".zip "${APP_NAME}".app

    xcrun notarytool submit ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/"${APP_NAME}".zip --wait --keychain-profile AC_NOTARY
    echo "${buildName}".zip
    cd ~
    echo "......................................................................................."
    echo -e "\n\n"

    version=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/${APP_NAME}.app/Contents/Info.plist")
    rm -rf ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/$APP_FILE
}

function cleanUpDirectory() {
    #Clean up directory
    echo -e "\033[1m** $currentBuildDir CLEANUP **\033[0m"
    echo "......................................................................................."
    rm -r "${SCRIPTPATH}/AutoGeneratedContent/${currentBuildDir}"
    echo "......................................................................................."
    echo -e "\n\n"
}

function showAlert() {
    local message="$1"
    local action="${2:-echo 'No action provided, running default action...'}"  # Default action

    if [ -z "$message" ]; then
        echo "Error: No message provided for alert."
        exit 1
    fi

    # Display the alert and capture the button clicked
    buttonClicked=$(osascript -e "display dialog \"$message\" buttons {\"OK\"} default button \"OK\"" 2>/dev/null)

    # Perform the action if "OK" is clicked
    if [[ "$buttonClicked" == *"OK"* ]]; then
        # Execute the dynamic action or default action if none is provided
        eval "$action"
    fi
}

showAlert "Please wait until the process completes. It will take a while."
cleanUpDirectory
createArchive
compressApp
createversionXML
showAlert "Your process has been completed successfully. Please upload the two files listed below to your server." "open ${SCRIPTPATH}/AutoGeneratedContent/ExportedArchiveContent/"
