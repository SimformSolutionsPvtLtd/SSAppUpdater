//
//  SSScriptOrCommandExecutor.swift
//  Pods
//
//  Created by Rishita Panchal on 28/08/24.
//

import Foundation

enum SSScriptOrCommandExecutor {
    /**
     Executes a command in the terminal and returns the output as a string.
     - Parameter cmd: A string representing the command to be executed in the terminal.

     - Returns: An optional string containing the output generated by executing the command. If the command execution fails or returns no output, nil is returned.
    */
    static func executeCommand(_ cmd: String) -> String? {
        let pipe = Pipe()
        let process = Process()
        process.launchPath = "/bin/sh"
        process.arguments = ["-c", String(format: "%@", cmd)]
        process.standardOutput = pipe
        let fileHandle = pipe.fileHandleForReading
        process.launch()
        return String(data: fileHandle.readDataToEndOfFile(), encoding: .utf8)
    }

    /**
     Executes an AppleScript and returns the output along with the execution status.

     - Parameter appleScript: An enumeration representing the AppleScript to be executed.

     - Returns: A tuple containing the `output` generated by the AppleScript and a boolean indicating the `execution status`. If the script execution is successful, the execution status is true; otherwise, it's false. The output string is the result of executing the AppleScript.
    */
    static func executeAppleScript(appleScript: AppleScripts) -> (output: String, executionStatus: Bool) {
        let process = Process()
        process.launchPath = "/usr/bin/osascript"
        process.arguments = ["-e", appleScript.script]

        let pipe = Pipe()
        process.standardOutput = pipe
        process.launch()

        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) ?? ""
        process.waitUntilExit()
        return (output, process.terminationStatus == 0)
    }
}
